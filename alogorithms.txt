Algorithm palindrome:
1. Start
2. Receive the value for USERS as arguments
3. Initialize String CONTAINER=""
4. append USERS[INDEX] to CONTAINER
5. Repeat Step 4 until INDEX is 0 from USERS.Length
6. Check IF USERS = NEW_USERS, then return palindrome
7. Otherwise return Not a palindrome
8. Stop

Algorithm Armstrong:
12

1+8>>9

121

1+8+1>>10

153
1+125+ 27   >> 


2 Sum problem:
[1,8,5,7,2]
target=10

find: 8 and 2

first=0     1
second=0+1  8,5,7,2

first=1     8
second=2    5,7,2   >> 8,2

first=2     5
second=3    7,2

first=3     7
second=4    2

O(2n):
while:
    body1
while:
    body2


Algorithm: O(n2)
1. Start
2. Get the list and target as parameter
3. Initialize variable second=first+1
4. SUM first+second position of list
5. Check IF SUM=target, then Display the first and second and return
6. Repeat Step 4 and 5 Until second = len(list)
7. Repeat Step 6 range first=0 to first < len(list)
8. Otherwise, Display No pair found
9. Stop


Selection sort:
1. Start
2. Get the myList as parameters
3. Initialize Compare=Hold+1
4. Check IF Compare<Hold, then swap
5. Repeat step 4 until Compare < len(myList)
6. Repeat Step 3 to 5 range of Hold=0 Hold < len(myList)
7. Stop


Finding Duplicates:
1. Start
2. Receive the Paragraph as paramters
3. Split by space
4. Initialize Compare=Hold+1
5. Check IF Compare==Hold, then Display the word
6. Repeat step 4 until Compare < len(Paragraph)
7. Repeat Step 3 to 5 range of Hold=0 Hold < len(Paragraph)
8. Stop

Sorting algorithms:
	User friendly: using loops
		Selection, bubble, insertion,...
	Efficient		: divide and conquer
		Quick, heap, merge,.....

Selection sort:
	s		c
	0 >> 1,2,3,4,5
	1 >> 2,3,4,5
	2 >> 3,4,5
	3 >> 4,5
	4 >> 5

	  0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
	 s 		  		  c	
	1.1           12.8	8.9		9.0		45.1		2.3
	  s						 		  		 c
	1.1           12.8	8.9		9.0		45.1		2.3
	   		    s		  c
	1.1           8.9		12.8		9.0		45.1		2.3
	                    s		                  		        	 c
	1.1           2.3		12.8		9.0		45.1		8.9
	                    s		                  		        	 c
	1.1           2.3		12.8		9.0		45.1		8.9
	                    		   s             c  		        	 
	1.1           2.3		9.0		12.8		45.1		8.9
	                    		   s               		        	 c
	1.1           2.3		8.9		12.8		45.1		9.0
	                    		   s               		        	 c
	1.1           2.3		8.9		12.8		45.1		9.0
	                    		                  s		    c    	 
	1.1           2.3		8.9		12.8		45.1		9.0
	                    		                  s		         	 c
	1.1           2.3		8.9		9.0		45.1		12.8
	                    		                  s		         	 c
	1.1           2.3		8.9		9.0		45.1		12.8
	                    		                  		  s       	 c
	1.1           2.3		8.9		9.0		12.8		45.1
	                    		                  		  s       	 c


[MongoDB,Flask,Jinja,DJango,Python,Mongoose]


Quick Sort: O(nlogn)
-1	0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
i	s										e | P.D
        c,i

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
         s,i               c								e | P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
         s               i,c								e | P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
         s               i		c						e | P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	1.1 		9.0 		45.1 	2.3
    s               i				c				e | P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	9.0 		1.1 		45.1 	2.3
    s               		i		c				e | P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	9.0 		1.1 		45.1 	2.3
    s               		i				c		e | P.D

	0		   1  	2		    3		  4		    5
	8.9		12.8 	9.0 		45.1	1.1 		2.3
    s               				i		c		e | P.D


swap between i+1 and end
	
	0		   1  		  2		  3		  4		 5
	8.9		12.8 	9.0 		45.1	2.3 		1.1
							 i		i+1		P.D

	0		   1  		  2		  3		  4		 5
	8.9		12.8 	9.0 		45.1	2.3 		1.1
							 i		i+1		P.D
									P.P

0-3	>> p.D 45.1




Quick Sort:
1. Start
2. Initialize pivotalData = myList[end], initial=start-1
3. Initialize current=start
4. Check if current>pivotalData, then swap current with initial+1
5. Repeat step 4 until current < end
6. Swap between myList[end] with myList[initial+1]
7. return initial+1 as pivotal point


8. Initialize pivotalPoint with Step 7
9. Split myList start to pivotalPoint-1, then perform Step 1 to 7
10. Split myList pivotalPoint+1 to end, then perform Step 1 to 7
11. Recursivly perform step 8 to 10 until start<end
12. Stop


Heap Sort: divide and conquer
Heapify >> find and replace maximum element in the tree as root
1. Start
2. Receive the myList, Length and Parent
3. Initialize maximum=parent, left=2*parent+1, right=2*parent+2
4. Check if left<length and myList[left]>myList[maxmimum], then maximum=left
5. Check if right<length and myList[right]>myList[maximum], then maximum=right
6. Check if parent!=maximum, then swap between myList[maximum] with myList[parent]
	repeat step 2 to 6 recursivly with parent=maximum
7. Stop
Sort>>
1. Start
2. Initialize begin=len(myList)/2 - 1
3. Heapify(myList, len, begin)
4. Repeat step 3 until begin>=0 by begin-1
5. Initialize position=len(myList)
6. Swap between 0 with position
7. Repeat step 6 until position>0 by position-1
8. Stop

Bubble sort:
89 12 34 11 56

0 < 4		>> times sort gonna happen>> length-1
0 < 4		>> bubble >> length-times-1
	bubble - bubble+1	>> swap

89 12 34 11 56
b  b+1

12 89 34 11 56
    b b+1

12 34 89 11 56
	  b  b+1
12 34 11 89 56
         b  b+1
12 34 11 56 89

0 < 3 (5-1-1)

12 34 11 56 89
b  b+1
12 34 11 56 89
    b b+1
12 11 34 56 89
       b b+1

0 < 2 (5-2-1)
12 11 34 56 89
b  b+1
11 12 34 56 89
   b  b+1

1. Start
2. Initialize times=0
3. Initialize bubble=0 
4. Check if myList[bubble]>myList[bubble+1], then swap between bubble and bubble+1
5. Repeat the Step 4 until bubble<len(myList)-times-1
6. Repeat Step 3 to 5 until times<len(myList)-1
7. Stop

Algorithm Merge sort:
1. Start
2. Receive the myList as parameters
3. Check if len(myList)>1, then Assign MID = len(myList)//2
4. Initialize LEFT = myList[0:MID], RIGHT = myList[MID:END]
5. Repeat step 2 to 4 recursivly LEFT and RIGHT
6. Initialize leftPos=0, rightPos=0, index=0
7. Check if LEFT[leftPos]<RIGHT[rightPos], then myList[index]=LEFT[leftPos] and leftPos+1
   Otherwise, myList[index]=RIGHT[rightPos] and rightPos+1
8. index+1
9. Repeat step 7 to 8 until leftPos<len(LEFT) and rightPos<len(RIGHT)
10. myList[index]=LEFT[leftPos] , leftPos+1 and index+1
11. Repeat 10 until leftPos<len(LEFT)
12. myList[index]=RIGHT[rightPos], rightPos+1 and index+1
13. Repeat 12 until rightPos<len(RIGHT)
14. Stop


Insertion sort:
  0   1   2  3    4   5
4.5 2.3 9.2 0.012 5.6 0.89

1>> 0
2>> 0,1
3>> 0,1,2
4>> 0,1,2,3
5>> 0,1,2,3,4

  0   1   2  3    4   5
4.5 2.3 9.2 0.012 5.6 0.89

  0   1   2  3    4   5
2.3 4.5 9.2 0.012 5.6 0.89

  0   1   2  3    4   5
2.3 4.5 9.2 0.012 5.6 0.89

  0   1   2   3    4   5
0.012 4.5 9.2 2.3 5.6 0.89

  0   1   2   3    4   5
0.012 2.3 9.2 4.5 5.6 0.89

  0   1   2   3    4   5
0.012 2.3 4.5 9.2 5.6 0.89

  0   1   2   3    4   5
0.012 2.3 4.5 5.6 9.2 0.89

  0   1     2   3    4   5
0.012 0.89 4.5 5.6 9.2  2.3

  0   1     2   3    4   5
0.012 0.89 2.3 5.6 9.2  4.5

  0   1     2   3    4   5
0.012 0.89 2.3 4.5 9.2  5.6

  0   1     2   3    4    5
0.012 0.89 2.3 4.5  5.6  9.2

Algorithm:
1. Start
2. Receive myList as parameter
3. Initialize current = 1
4. holded=myList[current]
5. Initialize Previous = current - 1
6. myList[Previous+1]=myList[Previous]
7. Previous-1
8. Repeat 6 and 7 until Previous>=0 and holded<myList[Previous]
9. myList[Previous+1]=holded
10. Repeat 4 to 9 until current<len(myList)
11. Stop


Interpolation search:

mid=start+(end-start)//2		>> binary search

mid=start+((target-myList[start]))*(end-start)/myList[end]-myList[start]

45 89 12 22 10 5

target=22
22>5
22<89

0   1  2   3   4   5
5  10  12  22  45  89
lf					rt

mid=0+((22-5))*(5-0)//(89-5)
0+17*5//84
0+1>>1>> mid>> 10, target=22

lf=mid+1

0   1  2   3   4   5
5  10  12  22  45  89
	   lt		   rt

mid=2+((22-12))*(5-2)//(89-12)
2+(10)*3//77
2+30//77>> 2>> mid>> 12 , target=22

0   1  2   3   4   5
5  10  12  22  45  89
	       lt	   rt
mid=3+((22-22))*(5-3)//(89-22)
3+0*2//67>>0//67>> 3>>mid, target=22

mid==target


Square value for given number:

3>> 3*3>> 9
1+3+5>> 9

4>> 4*4>> 16
1+3+5+7>> 16